//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wpf_test.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectRestaurantEntities : DbContext
    {
        public ProjectRestaurantEntities()
            : base("name=ProjectRestaurantEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<checks> checks { get; set; }
        public virtual DbSet<content_order_ingredients> content_order_ingredients { get; set; }
        public virtual DbSet<cooking> cooking { get; set; }
        public virtual DbSet<ingredients> ingredients { get; set; }
        public virtual DbSet<menu> menu { get; set; }
        public virtual DbSet<order_ingredients> order_ingredients { get; set; }
        public virtual DbSet<orders> orders { get; set; }
        public virtual DbSet<platens> platens { get; set; }
        public virtual DbSet<providers> providers { get; set; }
        public virtual DbSet<recipes> recipes { get; set; }
        public virtual DbSet<shipment> shipment { get; set; }
        public virtual DbSet<statuses> statuses { get; set; }
        public virtual DbSet<storage_ingredient> storage_ingredient { get; set; }
        public virtual DbSet<type_dish> type_dish { get; set; }
        public virtual DbSet<units_of_measurement> units_of_measurement { get; set; }
        public virtual DbSet<users> users { get; set; }
        public virtual DbSet<waiters> waiters { get; set; }
    
        public virtual ObjectResult<IngrList> getIngredients(string dish_name, Nullable<int> dish_count)
        {
            var dish_nameParameter = dish_name != null ?
                new ObjectParameter("dish_name", dish_name) :
                new ObjectParameter("dish_name", typeof(string));
    
            var dish_countParameter = dish_count.HasValue ?
                new ObjectParameter("dish_count", dish_count) :
                new ObjectParameter("dish_count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IngrList>("getIngredients", dish_nameParameter, dish_countParameter);
        }
    
        public virtual ObjectResult<storage_ingredient> getStorageState(Nullable<int> ingr_id)
        {
            var ingr_idParameter = ingr_id.HasValue ?
                new ObjectParameter("ingr_id", ingr_id) :
                new ObjectParameter("ingr_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storage_ingredient>("getStorageState", ingr_idParameter);
        }
    
        public virtual ObjectResult<storage_ingredient> getStorageState(Nullable<int> ingr_id, MergeOption mergeOption)
        {
            var ingr_idParameter = ingr_id.HasValue ?
                new ObjectParameter("ingr_id", ingr_id) :
                new ObjectParameter("ingr_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storage_ingredient>("getStorageState", mergeOption, ingr_idParameter);
        }
    
        public virtual ObjectResult<cooking> getCurrentCooking(Nullable<int> checkId)
        {
            var checkIdParameter = checkId.HasValue ?
                new ObjectParameter("checkId", checkId) :
                new ObjectParameter("checkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cooking>("getCurrentCooking", checkIdParameter);
        }
    
        public virtual ObjectResult<cooking> getCurrentCooking(Nullable<int> checkId, MergeOption mergeOption)
        {
            var checkIdParameter = checkId.HasValue ?
                new ObjectParameter("checkId", checkId) :
                new ObjectParameter("checkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cooking>("getCurrentCooking", mergeOption, checkIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getCurrentDish(string dishName)
        {
            var dishNameParameter = dishName != null ?
                new ObjectParameter("dishName", dishName) :
                new ObjectParameter("dishName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getCurrentDish", dishNameParameter);
        }
    
        public virtual ObjectResult<menu> getDishInfo(Nullable<int> dishId)
        {
            var dishIdParameter = dishId.HasValue ?
                new ObjectParameter("dishId", dishId) :
                new ObjectParameter("dishId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<menu>("getDishInfo", dishIdParameter);
        }
    
        public virtual ObjectResult<menu> getDishInfo(Nullable<int> dishId, MergeOption mergeOption)
        {
            var dishIdParameter = dishId.HasValue ?
                new ObjectParameter("dishId", dishId) :
                new ObjectParameter("dishId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<menu>("getDishInfo", mergeOption, dishIdParameter);
        }
    
        public virtual ObjectResult<users> getUserInfo(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<users>("getUserInfo", userIdParameter);
        }
    
        public virtual ObjectResult<users> getUserInfo(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<users>("getUserInfo", mergeOption, userIdParameter);
        }
    }
}
