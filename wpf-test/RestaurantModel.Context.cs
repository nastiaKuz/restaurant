//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wpf_test
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Project_Restaurant1Entities : DbContext
    {
        public Project_Restaurant1Entities()
            : base("name=Project_Restaurant1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<checks> checks { get; set; }
        public virtual DbSet<content_order_ingredients> content_order_ingredients { get; set; }
        public virtual DbSet<cooking> cooking { get; set; }
        public virtual DbSet<ingredients> ingredients { get; set; }
        public virtual DbSet<menu> menu { get; set; }
        public virtual DbSet<order_ingredients> order_ingredients { get; set; }
        public virtual DbSet<orders> orders { get; set; }
        public virtual DbSet<platens> platens { get; set; }
        public virtual DbSet<providers> providers { get; set; }
        public virtual DbSet<recipes> recipes { get; set; }
        public virtual DbSet<shipment_ingredients> shipment_ingredients { get; set; }
        public virtual DbSet<statuses> statuses { get; set; }
        public virtual DbSet<storage_ingredient> storage_ingredient { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<type_dish> type_dish { get; set; }
        public virtual DbSet<units_of_measurement> units_of_measurement { get; set; }
        public virtual DbSet<users> users { get; set; }
        public virtual DbSet<waiters> waiters { get; set; }
        public virtual DbSet<vChecks> vChecks { get; set; }
        public virtual DbSet<vChecks_ac> vChecks_ac { get; set; }
        public virtual DbSet<vContent> vContent { get; set; }
        public virtual DbSet<vOrder> vOrder { get; set; }
        public virtual DbSet<vOrders> vOrders { get; set; }
        public virtual DbSet<vRecipes> vRecipes { get; set; }
        public virtual DbSet<vShipment> vShipment { get; set; }
    
        [DbFunction("Project_Restaurant1Entities", "FCooking")]
        public virtual IQueryable<FCooking_Result> FCooking(Nullable<System.DateTime> data)
        {
            var dataParameter = data.HasValue ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FCooking_Result>("[Project_Restaurant1Entities].[FCooking](@data)", dataParameter);
        }
    
        [DbFunction("Project_Restaurant1Entities", "FCookingCheck")]
        public virtual IQueryable<FCookingCheck_Result> FCookingCheck(Nullable<int> check_id)
        {
            var check_idParameter = check_id.HasValue ?
                new ObjectParameter("check_id", check_id) :
                new ObjectParameter("check_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FCookingCheck_Result>("[Project_Restaurant1Entities].[FCookingCheck](@check_id)", check_idParameter);
        }
    
        public virtual int Discount(Nullable<int> p_id, Nullable<int> p_unit_of_measurement_id, Nullable<int> p_type_dish_id, string p_dish_name, Nullable<int> p_size, Nullable<double> p_price)
        {
            var p_idParameter = p_id.HasValue ?
                new ObjectParameter("p_id", p_id) :
                new ObjectParameter("p_id", typeof(int));
    
            var p_unit_of_measurement_idParameter = p_unit_of_measurement_id.HasValue ?
                new ObjectParameter("p_unit_of_measurement_id", p_unit_of_measurement_id) :
                new ObjectParameter("p_unit_of_measurement_id", typeof(int));
    
            var p_type_dish_idParameter = p_type_dish_id.HasValue ?
                new ObjectParameter("p_type_dish_id", p_type_dish_id) :
                new ObjectParameter("p_type_dish_id", typeof(int));
    
            var p_dish_nameParameter = p_dish_name != null ?
                new ObjectParameter("p_dish_name", p_dish_name) :
                new ObjectParameter("p_dish_name", typeof(string));
    
            var p_sizeParameter = p_size.HasValue ?
                new ObjectParameter("p_size", p_size) :
                new ObjectParameter("p_size", typeof(int));
    
            var p_priceParameter = p_price.HasValue ?
                new ObjectParameter("p_price", p_price) :
                new ObjectParameter("p_price", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Discount", p_idParameter, p_unit_of_measurement_idParameter, p_type_dish_idParameter, p_dish_nameParameter, p_sizeParameter, p_priceParameter);
        }
    
        public virtual int PUsers(Nullable<int> p_id, string p_login, string p_password)
        {
            var p_idParameter = p_id.HasValue ?
                new ObjectParameter("p_id", p_id) :
                new ObjectParameter("p_id", typeof(int));
    
            var p_loginParameter = p_login != null ?
                new ObjectParameter("p_login", p_login) :
                new ObjectParameter("p_login", typeof(string));
    
            var p_passwordParameter = p_password != null ?
                new ObjectParameter("p_password", p_password) :
                new ObjectParameter("p_password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUsers", p_idParameter, p_loginParameter, p_passwordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_GetErrorInfo_Result> usp_GetErrorInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetErrorInfo_Result>("usp_GetErrorInfo");
        }
    }
}
